// Mocks generated by Mockito 5.1.0 from annotations
// in section_26/test/food_unit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:ui' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:section_26/api/food_repo.dart' as _i2;
import 'package:section_26/model/food_model.dart' as _i5;
import 'package:section_26/model/food_pict.dart' as _i6;
import 'package:section_26/stores/food_enum.dart' as _i4;
import 'package:section_26/stores/food_viewModel.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFoodRepo_0 extends _i1.Fake implements _i2.FoodRepo {}

/// A class which mocks [FoodViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodViewModel extends _i1.Mock implements _i3.FoodViewModel {
  MockFoodViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FoodRepo get foodRepo => (super.noSuchMethod(Invocation.getter(#foodRepo),
      returnValue: _FakeFoodRepo_0()) as _i2.FoodRepo);
  @override
  set foodRepo(_i2.FoodRepo? _foodRepo) =>
      super.noSuchMethod(Invocation.setter(#foodRepo, _foodRepo),
          returnValueForMissingStub: null);
  @override
  _i4.FoodStateType get stateType =>
      (super.noSuchMethod(Invocation.getter(#stateType),
          returnValue: _i4.FoodStateType.loading) as _i4.FoodStateType);
  @override
  set stateType(_i4.FoodStateType? _stateType) =>
      super.noSuchMethod(Invocation.setter(#stateType, _stateType),
          returnValueForMissingStub: null);
  @override
  List<_i5.FoodModel> get getDataFood =>
      (super.noSuchMethod(Invocation.getter(#getDataFood),
          returnValue: <_i5.FoodModel>[]) as List<_i5.FoodModel>);
  @override
  List<_i6.FoodPictModel> get getPictFood =>
      (super.noSuchMethod(Invocation.getter(#getPictFood),
          returnValue: <_i6.FoodPictModel>[]) as List<_i6.FoodPictModel>);
  @override
  _i4.FoodStateType get getStatetype =>
      (super.noSuchMethod(Invocation.getter(#getStatetype),
          returnValue: _i4.FoodStateType.loading) as _i4.FoodStateType);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i4.FoodStateType changeState(_i4.FoodStateType? value) =>
      (super.noSuchMethod(Invocation.method(#changeState, [value]),
          returnValue: _i4.FoodStateType.loading) as _i4.FoodStateType);
  @override
  _i7.Future<dynamic> getFoodRepo() =>
      (super.noSuchMethod(Invocation.method(#getFoodRepo, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  _i7.Future<dynamic> getPict() =>
      (super.noSuchMethod(Invocation.method(#getPict, []),
          returnValue: Future<dynamic>.value()) as _i7.Future<dynamic>);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
